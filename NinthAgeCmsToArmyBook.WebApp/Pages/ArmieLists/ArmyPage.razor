@page "/army/{ArmyName}"
@using NinthAgeCmsToArmyBook.Shared.ArmyBooks
@using NinthAgeCmsToArmyBook.Shared.Changes

@if (SelectedVersion != null)
{
    <PageTitle>@SelectedVersion.ArmyName (@SelectedVersion.BookVersion)</PageTitle>
    
    <div class="row">
        <div class="col">
            <button class="btn btn-outline-success float-end mb-2" @onclick="CreateNewVersion">
                <span class="oi oi-plus me-2"></span>
                <span>new version</span>
            </button>    
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="dropdown float-end mb-2">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownSeason" data-bs-toggle="dropdown" aria-expanded="false">
                    Switch version
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownSeason">
                    @foreach (var armyBook in Versions.AsEnumerable().Reverse())
                    {
                        <li>
                            <a class="dropdown-item" @onclick="() => SelectVersion(armyBook)">@armyBook.BookVersion</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h1>@SelectedVersion.ArmyName (@SelectedVersion.BookVersion)</h1>
        </div>
        <div class="col">
            <button class="btn btn-success float-end" @onclick="SaveArmy">
                <span class="oi oi-file me-2"></span>
                @if (DidSaveCorrect)
                {
                    <span>Save changes</span>
                }
                else
                {
                    <span>Someone else saved, changes reverted</span>
                }
            </button>
        </div>
    </div>
    
    <div class="row">
        <div class="col">
            <h2>Units</h2>
        </div>
        <div class="col">
            <button class="btn btn-outline-success float-end" @onclick="AddUnit">
                <span class="oi oi-plus"></span>
                <span>add unit</span>
            </button>
        </div>
        <div class="accordion mb-3">
            @foreach (var unit in SelectedVersion.Units)
            {
                <UnitComponent unit="@unit"/>
            }
        </div>
    </div>
    
    <div class="row mb-2">
        <div class="col">
            <h2>Changes to last version</h2>
        </div>
        <div class="accordion">
            <ul class="list-group">
                @foreach (var unit in ChangesToLastVersion)
                {
                    <li class="list-group-item">@unit.Print()</li>
                }
            </ul>
        </div>
    </div>
    
    <div class="row">
    <div class="col">
            <a href="@($"api/Files/download-pdf?armyName={SelectedVersion.ArmyName}&version={SelectedVersion.BookVersion}")">
                <button class="btn btn-success float-end ms-2">
                    <span class="oi oi-plus"></span>
                    <span>download pdf</span>
                </button>
            </a>
            <button class="btn btn-outline-success float-end" @onclick="BuildPdfFile">
                <span class="oi oi-plus"></span>
                <span>build pdf</span>
            </button>
        </div>
    </div>
}
else
{
    <div>Loading...</div>
}

@inject HttpClient HttpClient

@code {
    [Parameter]
    public string ArmyName { get; set; }
    public ArmyBook SelectedVersion { get; set; }
    public List<ArmyBook> Versions { get; set; }
    public bool DidSaveCorrect { get; set; } = true;
    public bool PdfBuilding { get; set; }
    public List<UnitChange> ChangesToLastVersion { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Versions = await HttpClient.GetFromJsonAsync<List<ArmyBook>>($"api/Armies/?nameFilter={ArmyName}");
        SelectedVersion = Versions.Last();
        await UpdateChanges();
    }

    private async Task UpdateChanges()
    {
        ChangesToLastVersion = await HttpClient.GetFromJsonAsync<List<UnitChange>>($"api/Change/?armyName={ArmyName}&version={SelectedVersion.BookVersion}");
    }

    private async Task SelectVersion(ArmyBook armyBook)
    {
        SelectedVersion = armyBook;
        await UpdateChanges();
    }

    private async Task CreateNewVersion()
    {
        var result = await HttpClient.PostAsJsonAsync($"api/Armies/{SelectedVersion.ArmyId}", new {});
        result.EnsureSuccessStatusCode();
        var armyBook = await result.Content.ReadFromJsonAsync<ArmyBook>();
        Versions.Add(armyBook);
        SelectedVersion = armyBook;
        ChangesToLastVersion = new List<UnitChange>();
    }

    private void AddUnit()
    {
        SelectedVersion.Units.Add(Unit.Init(SelectedVersion.Units));
    }

    private async Task SaveArmy()
    {
        DidSaveCorrect = true;
        DidSaveCorrect = (await HttpClient.PutAsJsonAsync($"api/Armies/{SelectedVersion.ArmyId}", SelectedVersion)).IsSuccessStatusCode;
        if (!DidSaveCorrect)
        {
            SelectedVersion = await HttpClient.GetFromJsonAsync<ArmyBook>($"api/Armies/{SelectedVersion.ArmyId}");
        }
        
        await UpdateChanges();
    }

    private async Task BuildPdfFile()
    {
        PdfBuilding = true;
        await HttpClient.PutAsJsonAsync($"api/Files/build-pdf?armyId={SelectedVersion.ArmyId}&version={SelectedVersion.BookVersion}", new {});
        PdfBuilding = false;
    }
}